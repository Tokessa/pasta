import ElkConstructor from 'elkjs/lib/elk.bundled'
import { createDefaultModule, createDefaultSharedModule, DefaultSharedModuleContext, inject, Module, PartialLangiumServices } from 'langium';
import { LangiumSprottyServices, LangiumSprottySharedServices, SprottyDiagramServices, SprottySharedModule } from 'langium-sprotty';
import { DefaultElementFilter, ElkFactory, ElkLayoutEngine, IElementFilter, ILayoutConfigurator } from 'sprotty-elk/lib/elk-layout';
import { STPADiagramGenerator } from './diagram-generator';
import { StpaGeneratedModule, STPAGeneratedSharedModule } from './generated/module';
import { STPALayoutConfigurator } from './layout-config';
import { Options } from './options';
import { STPAScopeProvider } from './stpa-scopeProvider';
import { StpaValidationRegistry, StpaValidator } from './stpa-validator';


/**
 * Declaration of custom services - add your own service classes here.
 */
export type StpaAddedServices = {
    references: {
        STPAScopeProvider: STPAScopeProvider
    },
    validation: {
        StpaValidator: StpaValidator
    },
    layout: {
        ElkFactory: ElkFactory,
        ElementFilter: IElementFilter,
        LayoutConfigurator: ILayoutConfigurator
    },
    options: {
        Options: Options
    }
}

/**
 * Union of Langium default services and your custom services - use this as constructor parameter
 * of custom service classes.
 */
export type StpaServices = LangiumSprottyServices & StpaAddedServices

/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */
export const StpaModule: Module<StpaServices, PartialLangiumServices & SprottyDiagramServices & StpaAddedServices> = {
    diagram: {
        DiagramGenerator: services => new STPADiagramGenerator(services),
        ModelLayoutEngine: services => new ElkLayoutEngine(services.layout.ElkFactory, services.layout.ElementFilter, services.layout.LayoutConfigurator) as any
    },
    references: {
        ScopeProvider: services => new STPAScopeProvider(services),
        STPAScopeProvider: services => new STPAScopeProvider(services)
    },
    validation: {
        ValidationRegistry: services => new StpaValidationRegistry(services),
        StpaValidator: () => new StpaValidator()
    },
    layout: {
        ElkFactory: () => () => new ElkConstructor({ algorithms: ['layered'] }),
        ElementFilter: () => new DefaultElementFilter,
        LayoutConfigurator: () => new STPALayoutConfigurator
    },
    options: {
        Options: () => new Options()
    }
};

/**
 * Inject the full set of language services by merging three modules:
 *  - Langium default services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 */
export function createStpaServices(context?: DefaultSharedModuleContext): { shared: LangiumSprottySharedServices, states: StpaServices} {
    const shared = inject(
        createDefaultSharedModule(context),
        STPAGeneratedSharedModule,
        SprottySharedModule
    )
    const states = inject(
        createDefaultModule({shared}),
        StpaGeneratedModule,
        StpaModule,
    )
    shared.ServiceRegistry.register(states)
    return { shared, states }
}
