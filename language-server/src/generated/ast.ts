/******************************************************************************
 * This file was generated by langium-cli 0.2.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable @typescript-eslint/array-type */
/* eslint-disable @typescript-eslint/no-empty-interface */
import { AstNode, AstReflection, Reference, isAstNode } from 'langium';

export interface ActionUCAs extends AstNode {
    readonly $container: Model;
    action: Reference<VerticalEdge>
    system: Reference<Node>
    ucas: Array<UCA>
}

export const ActionUCAs = 'ActionUCAs';

export function isActionUCAs(item: unknown): item is ActionUCAs {
    return reflection.isInstance(item, ActionUCAs);
}

export interface ContConstraint extends AstNode {
    readonly $container: Model;
    description: string
    name: string
    refs: Array<Reference<UCA>>
}

export const ContConstraint = 'ContConstraint';

export function isContConstraint(item: unknown): item is ContConstraint {
    return reflection.isInstance(item, ContConstraint);
}

export interface Edge extends AstNode {
    readonly $container: Graph;
    label: string
    name: string
    source: Reference<Node>
    target: Reference<Node>
}

export const Edge = 'Edge';

export function isEdge(item: unknown): item is Edge {
    return reflection.isInstance(item, Edge);
}

export interface Graph extends AstNode {
    readonly $container: Model;
    edges: Array<Edge>
    name: string
    nodes: Array<Node>
}

export const Graph = 'Graph';

export function isGraph(item: unknown): item is Graph {
    return reflection.isInstance(item, Graph);
}

export interface Hazard extends AstNode {
    readonly $container: Model | Hazard;
    description: string
    header: string
    name: SubID
    refs: Array<Reference<Loss>>
    subHazards: Array<Hazard>
}

export const Hazard = 'Hazard';

export function isHazard(item: unknown): item is Hazard {
    return reflection.isInstance(item, Hazard);
}

export interface HazardList extends AstNode {
    readonly $container: UCA | LossScenario;
    refs: Array<Reference<Hazard>>
}

export const HazardList = 'HazardList';

export function isHazardList(item: unknown): item is HazardList {
    return reflection.isInstance(item, HazardList);
}

export interface Loss extends AstNode {
    readonly $container: Model;
    description: string
    name: string
}

export const Loss = 'Loss';

export function isLoss(item: unknown): item is Loss {
    return reflection.isInstance(item, Loss);
}

export interface LossScenario extends AstNode {
    readonly $container: Model;
    description: string
    list: HazardList
    name: string
    uca: Reference<UCA>
}

export const LossScenario = 'LossScenario';

export function isLossScenario(item: unknown): item is LossScenario {
    return reflection.isInstance(item, LossScenario);
}

export interface Model extends AstNode {
    allUCAs: Array<ActionUCAs>
    controllerConstraints: Array<ContConstraint>
    controlStructure: Graph
    hazards: Array<Hazard>
    losses: Array<Loss>
    responsibilities: Array<Resps>
    safetyCons: Array<SafetyConstraint>
    scenarios: Array<LossScenario>
    systemLevelConstraints: Array<SystemConstraint>
}

export const Model = 'Model';

export function isModel(item: unknown): item is Model {
    return reflection.isInstance(item, Model);
}

export interface Node extends AstNode {
    readonly $container: Graph;
    actions: Array<VerticalEdge>
    feedbacks: Array<VerticalEdge>
    label: string
    name: string
    variables: Array<Variable>
}

export const Node = 'Node';

export function isNode(item: unknown): item is Node {
    return reflection.isInstance(item, Node);
}

export interface Responsibility extends AstNode {
    readonly $container: Resps;
    description: string
    name: string
    refs: Array<Reference<SystemConstraint>>
}

export const Responsibility = 'Responsibility';

export function isResponsibility(item: unknown): item is Responsibility {
    return reflection.isInstance(item, Responsibility);
}

export interface Resps extends AstNode {
    readonly $container: Model;
    responsiblitiesForOneSystem: Array<Responsibility>
    system: Reference<Node>
}

export const Resps = 'Resps';

export function isResps(item: unknown): item is Resps {
    return reflection.isInstance(item, Resps);
}

export interface SafetyConstraint extends AstNode {
    readonly $container: Model;
    description: string
    name: string
    scenario: Reference<LossScenario>
}

export const SafetyConstraint = 'SafetyConstraint';

export function isSafetyConstraint(item: unknown): item is SafetyConstraint {
    return reflection.isInstance(item, SafetyConstraint);
}

export interface SystemConstraint extends AstNode {
    readonly $container: Model | SystemConstraint;
    description: string
    header: string
    name: SubID
    ref: Reference<Hazard>
    systemSubConstraints: Array<SystemConstraint>
}

export const SystemConstraint = 'SystemConstraint';

export function isSystemConstraint(item: unknown): item is SystemConstraint {
    return reflection.isInstance(item, SystemConstraint);
}

export interface UCA extends AstNode {
    readonly $container: ActionUCAs;
    description: string
    list: HazardList
    name: string
}

export const UCA = 'UCA';

export function isUCA(item: unknown): item is UCA {
    return reflection.isInstance(item, UCA);
}

export interface Variable extends AstNode {
    readonly $container: Node;
    name: string
    values: Array<string>
}

export const Variable = 'Variable';

export function isVariable(item: unknown): item is Variable {
    return reflection.isInstance(item, Variable);
}

export interface VerticalEdge extends AstNode {
    readonly $container: Node;
    label: string
    name: string
    target: Reference<Node>
}

export const VerticalEdge = 'VerticalEdge';

export function isVerticalEdge(item: unknown): item is VerticalEdge {
    return reflection.isInstance(item, VerticalEdge);
}

export type SubID = string

export type StpaAstType = 'ActionUCAs' | 'ContConstraint' | 'Edge' | 'Graph' | 'Hazard' | 'HazardList' | 'Loss' | 'LossScenario' | 'Model' | 'Node' | 'Responsibility' | 'Resps' | 'SafetyConstraint' | 'SystemConstraint' | 'UCA' | 'Variable' | 'VerticalEdge';

export type StpaAstReference = 'ActionUCAs:action' | 'ActionUCAs:system' | 'ContConstraint:refs' | 'Edge:source' | 'Edge:target' | 'Hazard:refs' | 'HazardList:refs' | 'LossScenario:uca' | 'Responsibility:refs' | 'Resps:system' | 'SafetyConstraint:scenario' | 'SystemConstraint:ref' | 'VerticalEdge:target';

export class StpaAstReflection implements AstReflection {

    getAllTypes(): string[] {
        return ['ActionUCAs', 'ContConstraint', 'Edge', 'Graph', 'Hazard', 'HazardList', 'Loss', 'LossScenario', 'Model', 'Node', 'Responsibility', 'Resps', 'SafetyConstraint', 'SystemConstraint', 'UCA', 'Variable', 'VerticalEdge'];
    }

    isInstance(node: unknown, type: string): boolean {
        return isAstNode(node) && this.isSubtype(node.$type, type);
    }

    isSubtype(subtype: string, supertype: string): boolean {
        if (subtype === supertype) {
            return true;
        }
        switch (subtype) {
            default: {
                return false;
            }
        }
    }

    getReferenceType(referenceId: StpaAstReference): string {
        switch (referenceId) {
            case 'ActionUCAs:action': {
                return VerticalEdge;
            }
            case 'ActionUCAs:system': {
                return Node;
            }
            case 'ContConstraint:refs': {
                return UCA;
            }
            case 'Edge:source': {
                return Node;
            }
            case 'Edge:target': {
                return Node;
            }
            case 'Hazard:refs': {
                return Loss;
            }
            case 'HazardList:refs': {
                return Hazard;
            }
            case 'LossScenario:uca': {
                return UCA;
            }
            case 'Responsibility:refs': {
                return SystemConstraint;
            }
            case 'Resps:system': {
                return Node;
            }
            case 'SafetyConstraint:scenario': {
                return LossScenario;
            }
            case 'SystemConstraint:ref': {
                return Hazard;
            }
            case 'VerticalEdge:target': {
                return Node;
            }
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }
}

export const reflection = new StpaAstReflection();
