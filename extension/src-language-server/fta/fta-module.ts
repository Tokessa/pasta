
import ElkConstructor from 'elkjs/lib/elk.bundled';
import { createDefaultModule, createDefaultSharedModule, DefaultSharedModuleContext, inject, Module, PartialLangiumServices } from 'langium';
import { DefaultDiagramServerManager, DiagramActionNotification, LangiumSprottyServices, LangiumSprottySharedServices, SprottyDiagramServices, SprottySharedServices } from 'langium-sprotty';
import { DefaultElementFilter, ElkFactory, ElkLayoutEngine, IElementFilter, ILayoutConfigurator } from 'sprotty-elk/lib/elk-layout';
import { DiagramOptions } from 'sprotty-protocol';
import { URI } from 'vscode-uri';
import { FtaGeneratedModule, StpaGeneratedSharedModule } from '../generated/module';
import { FtaDiagramGenerator } from './fta-diagram-generator';
import { FtaDiagramServer } from './fta-diagramServer';
import { FtaLayoutConfigurator } from './fta-layout-config';
import { FtaSynthesisOptions } from './fta-synthesis-options';
import { FtaValidationRegistry, FtaValidator } from './fta-validator';







/**
 * Declaration of custom services - add your own service classes here.
 */
export type FtaAddedServices = {
    validation: {
        FtaValidator: FtaValidator;
    }
    layout: {
        ElkFactory: ElkFactory,
        ElementFilter: IElementFilter,
        LayoutConfigurator: ILayoutConfigurator;
    },
    options: {
        FtaSynthesisOptions: FtaSynthesisOptions
    }
   
};

/**
 * Union of Langium default services and your custom services - use this as constructor parameter
 * of custom service classes.
 */
export type FtaServices = LangiumSprottyServices & FtaAddedServices;

/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */
export const FtaModule: Module<FtaServices, PartialLangiumServices & SprottyDiagramServices &FtaAddedServices> = {
    diagram: {
        DiagramGenerator: services => new FtaDiagramGenerator(services), 
        ModelLayoutEngine: services => new ElkLayoutEngine(services.layout.ElkFactory, services.layout.ElementFilter, services.layout.LayoutConfigurator) as any
    },
    validation: {
        ValidationRegistry: services => new FtaValidationRegistry(services),
        FtaValidator: () => new FtaValidator()
    },
    layout: {
        ElkFactory: () => () => new ElkConstructor({ algorithms: ['layered'] }),
        ElementFilter: () => new DefaultElementFilter,
        LayoutConfigurator: () => new FtaLayoutConfigurator
    },
    options: {
        FtaSynthesisOptions: () => new FtaSynthesisOptions()
    },
};

export const ftaDiagramServerFactory =
    (services: LangiumSprottySharedServices): ((clientId: string, options?: DiagramOptions) => FtaDiagramServer) => {
        const connection = services.lsp.Connection;
        const serviceRegistry = services.ServiceRegistry;
        return (clientId, options) => {
            const sourceUri = options?.sourceUri;
            if (!sourceUri) {
                throw new Error("Missing 'sourceUri' option in request.");
            }
            const language = serviceRegistry.getServices(URI.parse(sourceUri as string)) as FtaServices;
            if (!language.diagram) {
                throw new Error(`The '${language.LanguageMetaData.languageId}' language does not support diagrams.`);
            }
            return new FtaDiagramServer(async action => {
                connection?.sendNotification(DiagramActionNotification.type, { clientId, action });
            }, language.diagram, clientId);
        };
    };
/**
 * instead of the default diagram server the fta-diagram server is used
 */
export const FtaSprottySharedModule: Module<LangiumSprottySharedServices, SprottySharedServices> = {
    diagram: {
        diagramServerFactory: ftaDiagramServerFactory,
        DiagramServerManager: services => new DefaultDiagramServerManager(services)
    }
};
/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 *
 * @param context Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
export function createFtaServices(context: DefaultSharedModuleContext): {
    shared: LangiumSprottySharedServices,
    fta: FtaServices
} {
    const shared = inject(
        createDefaultSharedModule(context),
        StpaGeneratedSharedModule,
        FtaSprottySharedModule
    );
    const fta = inject(
        createDefaultModule({ shared }),
        FtaGeneratedModule,
        FtaModule
    );
    shared.ServiceRegistry.register(fta);
    return { shared, fta };
}

